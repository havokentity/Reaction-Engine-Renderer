float attenuate(float dis, int light)
{
	//float attenuation = 1/(0.001f + 0.003f*dis + 0.0004*dis*dis);
	float attenuation = 1/(glstate.light[light].attenuation.x + glstate.light[light].attenuation.y*dis + glstate.light[light].attenuation.z*dis*dis);
	return attenuation;
}

void pointLight(int light, float4 position, float4 normal, float shine,
				float4 view, out float diffuse, out float specular)
{
	float4 lightPos = glstate.light[light].position;
	float4 lightVec  = float4((lightPos - position).xyz, 0);	
   	float dis = length(lightVec);
	lightVec = normalize(lightVec);

	// attenuation
	float attenuation = attenuate(dis, light);

    	diffuse = max(dot(normal.xyz, lightVec.xyz)*attenuation, 0);

	float4 halfVector = normalize(lightVec + view);		
	
	specular = 0;
	specular = (diffuse>0)?pow(max(dot(normal, halfVector), 0), shine)*attenuation:0;
}

float spotLightEffect(float cosAngle, float outerCone, float innerCone)
{
	if(innerCone <= cosAngle)
	{
		return 1;
	} else {
		return smoothstep(outerCone, innerCone, cosAngle);
	}
}

void spotLight(int light, float4 position, float3 direction, float4 normal, float shine,
			   float innerCone, float outerCone,
			   float4 view, out float diffuse, out float specular)
{
	float4 lightPos = glstate.light[light].position;

	float4 lightVec  = float4((lightPos - position).xyz, 0);	
    float dis = length(lightVec);
	lightVec = normalize(lightVec);

	// attenuation
	float attenuation = attenuate(dis, light);

	float cosAngle = dot(lightVec, float4(direction, 0));

	float spotLightValue = spotLightEffect(cosAngle, outerCone, innerCone);
	
	diffuse = max(dot(normal.xyz, lightVec.xyz)*attenuation*spotLightValue, 0);

	float4 halfVector = normalize(lightVec + view);	
	
	specular = 0;
	specular = (diffuse>0)?saturate(pow(max(dot(normal, halfVector), 0), shine)*attenuation*spotLightValue):0;
}

void main(float2 texcoord: TEXCOORD0,
		  float4 position: TEXCOORD6,
		  float4 normal: TEXCOORD7,		
		  uniform float4x4 modelViewIT,	
		  uniform float3 direction,
		  uniform sampler2D texSampler: TEXUNIT0,

		  out float4 color:COLOR)
{
	modelViewIT = glstate.matrix.invtrans.modelview[0];

	//lightPos = mul(glstate.matrix.modelview[0], lightPos); 
	direction = mul((float3x3)glstate.matrix.modelview[0], direction); 
	
	//normal
	float4 norm = normal;
    	// transform the normal into eye space
    	norm = mul(modelViewIT, normal);
    	norm.xyz = normalize(norm.xyz);	

	float4 diffuse = 0, specular = 0;
	float tDiffuse = 0, tSpecular = 0;
	float4 ambient = float4(0.0f, 0.0f, 0.0f, 0.0f);

	float4 view = float4((-normalize(position.xyz), 0));

	for(int i = 0; i<2;i++)
	{
		pointLight(i, position, norm, 8, view, tDiffuse, tSpecular);
		//spotLight(i, position, direction, norm, 8, 0.95, 0.5, view, tDiffuse, tSpecular);
		diffuse += tDiffuse * glstate.light[i].diffuse;
		specular += tSpecular * glstate.light[i].specular;
		ambient += glstate.light[i].ambient;
	}

	color = (diffuse*tex2D(texSampler, texcoord) + specular + ambient);
}